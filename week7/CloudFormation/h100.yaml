AWSTemplateFormatVersion: 2010-09-09
Description: |
  JoniH100

Resources:
  joniS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: joni-h100
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
  joniS3Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: JoniPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Join
              - ""
              - - "arn:aws:s3:::"
                - !Ref joniS3Bucket
                - /*
      Bucket: !Ref joniS3Bucket

  joniApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: joni-gateway
      ProtocolType: HTTP

  lambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - "arn:aws:logs:*:*:*"
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com

  joniLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            const response = {
              body: JSON.stringify([
                { id: 1, name: 'Maksalaatikko'},
                { id: 2, name: 'Lasagne'},
                { id: 3, name: 'Pizza'},
              ]),
              statusCode: 200
            }
            return response
          }
      FunctionName: joni-function
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt lambdaRole.Arn
      Runtime: nodejs16.x

  lambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref joniLambda
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com

  joniIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref joniApi
      Description: Lambda proxy integration
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"
      IntegrationUri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${joniLambda.Arn}/invocations"

  apiGatewayStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      AutoDeploy: true
      DeploymentId: !Ref apiGatewayDeployment
      StageName: "$default"
      ApiId: !Ref joniApi

  apiGatewayDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - apiRoute
    Properties:
      ApiId: !Ref joniApi

  apiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref joniApi
      RouteKey: "GET /"
      AuthorizationType: NONE
      Target: !Join
        - /
        - - integrations
          - !Ref joniIntegration

Outputs:
  WebsiteURL:
    Value: !GetAtt
      - joniS3Bucket
      - WebsiteURL
    Description: URL for Joni's website hosted on S3
  S3BucketSecureURL:
    Value: !Join
      - ""
      - - "https://"
        - !GetAtt
          - joniS3Bucket
          - DomainName
    Description: Bucket that holds website content
